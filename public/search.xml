<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++学习书籍</title>
    <url>/2020/03/20/C++%E5%AD%A6%E4%B9%A0%E4%B9%A6%E7%B1%8D/</url>
    <content><![CDATA[<center>从入门到内存泄漏</center>
<span id="more"></span>

<h4 id="C-学习相关资料"><a href="#C-学习相关资料" class="headerlink" title="C++学习相关资料"></a><font color="#000000">C++学习相关资料</font></h4><h5 id="C-入门："><a href="#C-入门：" class="headerlink" title="C++入门："></a>C++入门：</h5><p>&amp;emsp;&amp;emsp;《C++Primer》 入门第一部.</p>
<p>&amp;emsp;&amp;emsp;《深入浅出MFC》 很值得看的一本书。侯捷著 国货精品,本应归入学习vc的范畴，但他实际是对widows API的c++框架介绍,用来做vc项目只能起辅助作用,对建立c++面向对象思想却多有启迪。</p>
<p>&amp;emsp;&amp;emsp;《The C++ standard library（C++标准程序库）》 这是标准模板库字典，你可以在本书中找到STL相关的一切知识。本书焦点放在标准模板库、检查容器、迭代器、函数对象和STL算法上。每一个元素都有深刻的呈现，包括其介绍、设计、运用实例、细节解说、陷阱、意想不到的危险，以及相关类别和函数等。</p>
<p>&amp;emsp;&amp;emsp;《C++实践之路》 周良忠译 一个计算器例子贯穿全书,几乎用到C++所有知识,真正的例子驱动教学法。</p>
<h5 id="C-进阶"><a href="#C-进阶" class="headerlink" title="C++进阶"></a>C++进阶</h5><p>&amp;emsp;&amp;emsp;《Effective C++》和《More effective C++》 作者Scott Meyers。你应该熟读它们，并清楚地理解每个项目。该书围绕55条准则，每一条都介绍了一个可让你写出更好的C++程序代码的方法，并以特别设计过的例子详加讨论。</p>
<p>&amp;emsp;&amp;emsp;《Exceptional C++（C++编程剖析）》和《More exceptional C++》 这两本书中都包含了40个C++编程问题，这些问题会让你磨练自己的技能，最终成为优秀的C++程序员。这些问题是Herb Sutter精心挑选，与ISO&#x2F;ANSI C++官方标准相一致，帮助程序员在设计、架构和编码过程中保持良好的风格，从而使编写的C++软件更健壮、更高效。</p>
<p>&amp;emsp;&amp;emsp;《Effective STL》 这是Scott Meyers的第三本C++专著，也是学习STL最权威的书籍。作者对书中的50个指导方针都作了详尽的分析，并配以示例。通过这些规则，C++开发者可以最大限度地使用STL。</p>
<p>&amp;emsp;&amp;emsp;《Generic programming and the STL（泛型编程与STL）》 本书阐述了泛型程序设计的核心理念：concepts（概念）、modeling（模型）和refinement（改善），并为你展示这些观念如何导出STL的基础概念：iterators（迭代器）、containers（容器）和function objects（函数对象）。按照本书所述，你可以把STL想象成一个由concepts组成的library，你将学习到STL正式结构并理解其强大的优势。</p>
<h5 id="深入C"><a href="#深入C" class="headerlink" title="深入C++"></a>深入C++</h5><p>&amp;emsp;&amp;emsp;《Modern C++ design（现代C++设计）》 作者Andrei Alexandrescu为C++程序员打开了一个新的局面。本书提供了一些针对软件设计的前沿方法，如联合设计模式、泛型编程，使程序员可以编写有表现力的、灵活的、高度可重用的代码。</p>
<p>&amp;emsp;&amp;emsp;《Inside the C++ object model（深度探索C++对象模型）》 本书专注于C++面向对象程序设计的底层机制，包括结构式语意、临时性对象的生成、封装、继承，以及虚拟——虚拟函数和虚拟继承，帮助你理解程序的底层实现，以便写出更高效的代码。最后，一开始借助书本学习C、C++语言可能有些困难。但是，这些书用最好的方式介绍了C语言中的基本概念。借助这些书，你可以从学习基本的C语言开始，一直深入到学习C、C++语言编程中的高级技巧。完成书中的练习很重要。在实现这些习题的过程中，你可以高效理解和学习有关概念。这些书，也为你继续学习其他高级语言，比如C++、JAVA，提供了基础。</p>
<h5 id="面向对象技术"><a href="#面向对象技术" class="headerlink" title="面向对象技术"></a>面向对象技术</h5><p>&amp;emsp;&amp;emsp;《设计模式-可复用面向对象软件的基础》 美国四人帮的跨时代大作 230页却足以开启一个时代,真正体现了面向对象技术的价值,是代码复用的经典之作,不能不看。</p>
<p>&amp;emsp;&amp;emsp;《UML Distilled》 UML建模很火欧，但对我来说看主要目的是看懂类关系草图，这本小书足以。</p>
<h5 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h5><p>&amp;emsp;&amp;emsp;《C++ Coding Standards: 101 Rules, Guidelines, and Best Practices》&#x2F;《C++ 编程规范》 个人认为此书应为C++程序员必备的案头书。几乎Effective系列和Exceptional系列都在这里得到了总结。最新的模版、异常的业界经验都在这里的到了体现。可能的唯一缺陷就是对一个新手而言，关于为什么这么做的问题，解释的不够</p>
<p>&amp;emsp;&amp;emsp;《华为C&#x2F;C++编码规范》 作为编码规范的补充学习资料</p>
<p>&amp;emsp;&amp;emsp;《Google C++ Coding Style》 作为编码规范的补充学习资料</p>
<p>&amp;emsp;&amp;emsp;《数据结构与算法分析C++语言描述》 这是所有编程语言中最应该学习的部分，程序组成的基础之一。顺序存储、链式存储、循环链表；双向链表、栈(顺序和链式)、队列(顺序和链式)；栈的应用、树基本概念及遍历、二叉树；排序算法、并归算法、选择、插入、快速、希尔。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>学习资料</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP常用的几种请求方式</title>
    <url>/2020/03/23/HTTP%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>&amp;emsp;&amp;emsp;根据 HTTP 标准，HTTP 请求可以使用多种请求方法。HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。</p>
<span id="more"></span>

<h4 id="HTTP常用的几种请求方式"><a href="#HTTP常用的几种请求方式" class="headerlink" title="HTTP常用的几种请求方式"></a><font color="#000000">HTTP常用的几种请求方式</font></h4><h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><p>&amp;emsp;&amp;emsp;get请求是用来获取数据的，只是用来查询数据，不对服务器的数据做任何的修改，新增，删除等操作。<br>&amp;emsp;&amp;emsp;在这里我们认为get请求是安全的，以及幂等的。安全就是指不影响服务器的数据，幂等是指同一个请求发送多次返回的结果应该相同。<br>特点：<br>&amp;emsp;&amp;emsp;get请求会把请求的参数附加在URL后面，这样会产生安全问题，如果是系统的登陆接口采用的get请求，需要对请求的参数做一个加密。<br>&amp;emsp;&amp;emsp;get请求其实本身HTTP协议并没有限制它的URL大小，但是不同的浏览器对其有不同的大小长度限制</p>
<h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5><p>&amp;emsp;&amp;emsp;post请求一般是对服务器的数据做改变，常用来数据的提交，新增操作。<br>特点：<br>&amp;emsp;&amp;emsp;post请求的请求参数都是请求体中<br>&amp;emsp;&amp;emsp;post请求本身HTTP协议也是没有限制大小的，限制它的是服务器的处理能力</p>
<h5 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h5><p>&amp;emsp;&amp;emsp;put请求与post一样都会改变服务器的数据，但是put的侧重点在于对于数据的修改操作，但是post侧重于对于数据的增加。</p>
<h5 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h5><p>&amp;emsp;&amp;emsp;delete请求用来删除服务器的资源。</p>
<h5 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h5><p>&amp;emsp;&amp;emsp;options请求属于浏览器的预检请求，查看服务器是否接受请求，预检通过后，浏览器才会去发get，post，put，delete等请求。至于什么情况下浏览器会发预检请求，浏览器会会将请求分为两类，简单请求与非简单请求，非简单请求会产生预检options请求。</p>
<h6 id="关于options请求具体详细的可以观看另一位作者的这篇文章："><a href="#关于options请求具体详细的可以观看另一位作者的这篇文章：" class="headerlink" title="关于options请求具体详细的可以观看另一位作者的这篇文章："></a>关于options请求具体详细的可以观看另一位作者的这篇文章：</h6><p>[<a href="https://www.jianshu.com/p/5cf82f092201]">https://www.jianshu.com/p/5cf82f092201]</a></p>
<h5 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h5><p>&amp;emsp;&amp;emsp;向服务器索与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以再不必传输整个响应内容的情况下，就可以获取包含在响应小消息头中的元信息。</p>
<h5 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h5><p>&amp;emsp;&amp;emsp;回显服务器收到的请求，主要用于测试或诊断</p>
<h5 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h5><p>&amp;emsp;&amp;emsp;HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器。</p>
<h5 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h5><p>&amp;emsp;&amp;emsp;这些不同方式的请求形式，只是一种规范定义而已，并不是说get请求无法修改服务器的数据，只是一种规范，比如你也可以所有的请求都通过post方式来访问，实现功能上面没有任何问题，只是说这种做不符合了规范而已，我们平常编码还是尽量符合规范比较好。</p>
<h4 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a><font color="#000000">HTTP工作原理</font></h4><p>&amp;emsp;&amp;emsp;HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求&#x2F;响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。<br>HTTP 请求&#x2F;响应的步骤：<br>&amp;emsp;&amp;emsp;客户端连接到Web服务器-&gt;发送Http请求-&gt;服务器接受请求并返回HTTP响应-&gt;释放连接TCP连接-&gt;客户端浏览器解析HTML内容</p>
<h5 id="客户端连接到Web服务器"><a href="#客户端连接到Web服务器" class="headerlink" title="客户端连接到Web服务器"></a>客户端连接到Web服务器</h5><p>&amp;emsp;&amp;emsp;一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，<a href="http://www.baidu.com/">http://www.baidu.com</a></p>
<h5 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h5><p>&amp;emsp;&amp;emsp;通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。</p>
<h5 id="服务器接受请求并返回HTTP响应"><a href="#服务器接受请求并返回HTTP响应" class="headerlink" title="服务器接受请求并返回HTTP响应"></a>服务器接受请求并返回HTTP响应</h5><p>&amp;emsp;&amp;emsp;Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。</p>
<h5 id="释放连接TCP连接"><a href="#释放连接TCP连接" class="headerlink" title="释放连接TCP连接"></a>释放连接TCP连接</h5><p>&amp;emsp;&amp;emsp;若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求。</p>
<h5 id="客户端浏览器解析HTML内容"><a href="#客户端浏览器解析HTML内容" class="headerlink" title="客户端浏览器解析HTML内容"></a>客户端浏览器解析HTML内容</h5><p>&amp;emsp;&amp;emsp;客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</p>
<h4 id="请求返回状态码"><a href="#请求返回状态码" class="headerlink" title="请求返回状态码"></a><font color="#000000">请求返回状态码</font></h4><p>200 OK 当您的操作将在响应正文中返回数据时，出现此结果。<br>204 No Content 当您的操作成功，但不在响应正文中返回数据时，出现此结果。<br>304 Not Modified（重定向）  当测试实体自上次检索以来是否被修改时，出现此结果。<br>403 Forbidden   客户端错误<br>401 Unauthorized 客户端错误<br>413 Payload Too Large（客户端错误） 当请求长度过长时，出现此结果。<br>400 BadRequest（客户端错误） 当参数无效时，出现此结果。<br>404 Not Found（客户端错误） 当资源不存在时，出现此结果。<br>405 Method Not Allowed（客户端错误）由于方法和资源组合不正确而出现此错误。 例如，您不能对一个实体集合使用 DELETE 或 PATCH。<br>412 Precondition Failed  客户端错误<br>501 Not Implemented（服务器错误） 当未实施某个请求的操作时，出现此结果。<br>503 Service Unavailable（服务器错误） 当 Web API 服务不可用时，出现此结果。</p>
<h4 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a><font color="#000000">主要特点</font></h4><h5 id="无连接"><a href="#无连接" class="headerlink" title="无连接"></a>无连接</h5><p>&amp;emsp;&amp;emsp;无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p>
<h5 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h5><p>&amp;emsp;&amp;emsp;HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p>
<h5 id="简单快速"><a href="#简单快速" class="headerlink" title="简单快速"></a>简单快速</h5><p>&amp;emsp;&amp;emsp;客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p>
<h5 id="灵活"><a href="#灵活" class="headerlink" title="灵活"></a>灵活</h5><p>&amp;emsp;&amp;emsp;HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p>
<h4 id="HTTP请求消息Request"><a href="#HTTP请求消息Request" class="headerlink" title="HTTP请求消息Request"></a><font color="#000000">HTTP请求消息Request</font></h4><p>&amp;emsp;&amp;emsp;包括:请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。<br><img src="/2020/03/23/HTTP%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F/p1.jpg" alt="HTTP请求报文格式"></p>
<h5 id="GET例子"><a href="#GET例子" class="headerlink" title="GET例子"></a>GET例子</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /562f25980001b1b106000338.jpg HTTP/1.1</span><br><span class="line">Host    img.mukewang.com</span><br><span class="line">User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</span><br><span class="line">Accept    image/webp,image/*,*/*;q=0.8</span><br><span class="line">Referer    http://www.imooc.com/</span><br><span class="line">Accept-Encoding    gzip, deflate, sdch</span><br><span class="line">Accept-Language    zh-CN,zh;q=0.8</span><br></pre></td></tr></table></figure>
<p>&amp;emsp;&amp;emsp;第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.<br>GET说明请求类型为GET,[&#x2F;562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。<br>&amp;emsp;&amp;emsp;第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息<br>从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等<br>&amp;emsp;&amp;emsp;第三部分：空行，请求头部后面的空行是必须的，即使第四部分的请求数据为空，也必须有空行。<br>&amp;emsp;&amp;emsp;第四部分：请求数据也叫主体，可以添加任意的其他数据。这个例子的请求数据为空。</p>
<h5 id="POST例子"><a href="#POST例子" class="headerlink" title="POST例子"></a>POST例子</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST / HTTP1.1</span><br><span class="line">Host:www.wrox.com</span><br><span class="line">User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</span><br><span class="line">Content-Type:application/x-www-form-urlencoded</span><br><span class="line">Content-Length:40</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">name=Professional%20Ajax&amp;publisher=Wiley</span><br></pre></td></tr></table></figure>
<p>&amp;emsp;&amp;emsp;第一部分：请求行，第一行明了是post请求，以及http1.1版本。<br>&amp;emsp;&amp;emsp;第二部分：请求头部，第二行至第六行。<br>&amp;emsp;&amp;emsp;第三部分：空行，第七行的空行。<br>&amp;emsp;&amp;emsp;第四部分：请求数据，第八行。</p>
<h4 id="HTTP响应消息Response"><a href="#HTTP响应消息Response" class="headerlink" title="HTTP响应消息Response"></a><font color="#000000">HTTP响应消息Response</font></h4><p>&amp;emsp;&amp;emsp;服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息；HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。<br>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Fri, 22 May 2009 06:07:21 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"> </span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;<span class="built_in">head</span>&gt;&lt;/head&gt;</span><br><span class="line">    body&gt;</span><br><span class="line">        &lt;!--body goes here--&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>&amp;emsp;&amp;emsp;第一部分：状态行，由HTTP协议版本号， 状态码（200）， 状态消息（OK） 三部分组成。<br>&amp;emsp;&amp;emsp;第二部分：消息报头，用来说明客户端要使用的一些附加信息<br>第二行和第三行为消息报头，Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text&#x2F;html),编码类型是UTF-8<br>&amp;emsp;&amp;emsp;第三部分：空行，消息报头后面的空行是必须的<br>&amp;emsp;&amp;emsp;第四部分：响应正文，服务器返回给客户端的文本信息。空行后面的html部分为响应正文。</p>
]]></content>
      <tags>
        <tag>HTTP</tag>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>常用控件命名规则</title>
    <url>/2020/07/22/%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6%E7%9A%84%E7%BC%A9%E5%86%99/</url>
    <content><![CDATA[<center>常用控件命名规则</center>
<span id="more"></span>

<p>Buttom按钮	Btn<br>CheckBox复选框	Chk<br>ColumnHeader视图列表头	Col<br>ComboBox组合框	Cbo<br>ContextMenu快捷菜单	Ctm<br>DataGrid数据网格控件	Dg<br>DataGridView数据网格视图控件	Dgv<br>DteTimePicker时间输入框	Dtp<br>DomainUpDown数值框	Dud<br>Form窗体	Frm<br>GroupBox 组合框	Grp<br>HscrollBar水平滚动条	Hsb<br>ImageList图标列表	Img<br>Label文本标签&#x2F;LinkLabel列表框	Lbl<br>ListBox列表框	Lst<br>ListView视图列表	Lvw<br>Menu菜单&#x2F;MenuItem菜单项	Menu<br>NumericUpDown数值框	Nud<br>Panel面板	Pnl<br>PictureBox图片框	Pic<br>ProgressBar进度条	Prg<br>RadioButton单选框按钮	Rdo<br>Spliter拆分条	Spl<br>StatusBar状态栏	Stu<br>StatusBarPanel状态栏区域	Stupnl<br>StatusStrip状态栏	Stu<br>TabControl分页控件	Tab<br>TabPage分页标签页面	Page<br>TextBox文本框	Txt<br>Timer定时器	Tmr<br>ToolBar工具条	Tbr<br>ToolStrip工具栏	Tsp<br>TooStripButton工具栏按钮	tspBtn<br>ToolStripComboBox工具栏下拉组合框	tspCbo<br>ToolStripDropDownMenu工具栏菜单项目	tspMenu<br>ToolStripLable工具栏静态文本	tspLbl<br>ToolStripProgressBar工具栏进度条	tspPrg<br>ToolStripTextBox工具栏文本框	Tsptxt<br>TreeView树状视图列表	Tvw<br>VscrollBar垂直滚动条	Vsb<br>WebBrowSer浏览器控件	Wb</p>
]]></content>
      <categories>
        <category>UI</category>
      </categories>
  </entry>
  <entry>
    <title>HelloWorld</title>
    <url>/2020/03/23/HelloWorld/</url>
    <content><![CDATA[<p>&amp;emsp;&amp;emsp;Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h4 id="Quick-Start-a-Post"><a href="#Quick-Start-a-Post" class="headerlink" title="Quick Start a Post"></a><font color="#000000">Quick Start a Post</font></h4><h5 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h5 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h5 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h5 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p><a href="https://hexo.io/zh-cn/docs/commands">点击浏览更多详细内容</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
